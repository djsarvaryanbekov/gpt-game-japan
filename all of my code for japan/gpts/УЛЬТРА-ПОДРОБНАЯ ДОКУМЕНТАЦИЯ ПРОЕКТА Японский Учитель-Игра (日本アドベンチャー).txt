Версия: [2024-07-27] - v0.2 (Прототип с ядром урока и главной страницей)

Статус: Активная разработка

1. Философия и Цели Проекта

1.1. Основная Миссия: Преодолеть разрыв между скучными образовательными приложениями и увлекательными играми. Создать среду, где изучение японского языка (уровни N5-N4, основа - Minna no Nihongo) становится мотивирующим приключением, а не рутиной.

1.2. Целевая Аудитория: Самостоятельные ученики, ищущие интерактивный и геймифицированный подход; игроки, интересующиеся японской культурой и языком; те, кому сложно поддерживать мотивацию при традиционном обучении.

1.3. Ключевые Принципы:

Обучение прежде всего: Игровые механики должны поддерживать и ускорять обучение, а не отвлекать или замедлять его. Эффективность усвоения материала – приоритет.

Вовлеченность через геймификацию: Использование элементов RPG (карта, прогрессия, квесты, награды) для создания чувства достижения и удержания интереса.

Интерактивность: Максимум взаимодействия пользователя с языковым материалом (упражнения, SRS, возможно, AI-диалоги в будущем).

Атмосфера: Создание уникального визуального и звукового стиля (пиксель-арт, неон, японская эстетика), погружающего в мир игры.

Адаптивность: По возможности, система должна адаптироваться к стилю обучения пользователя (например, через секретные квесты).

Доступность: Бесплатное использование (по крайней мере, на данном этапе) и ориентация на веб-платформу.

2. Игровая Концепция и Мир

2.1. Сеттинг: Стилизованная карта Японии (или вымышленного региона "Нихонго-кай"), выполненная в пиксель-арт стилистике. Возможные визуальные темы:

Феодальная Япония с магическими/духовными элементами.

Неоновый киберпанк-Токио с традиционными мотивами.

Спокойный природный пейзаж с храмами и додзё. (Может быть выбор темы?)

2.2. Роль Игрока: Путешественник ("Ученик", "Искатель знаний"), стилизованный под ниндзя или самурая (выбор или кастомизация). Цель – пройти путь по карте, изучая язык и становясь "Мастером".

2.3. AI-Гид / Сэнсэй: Персонаж-помощник (Мудрый Кот "Нэко-сэнсэй", Дух Лисы "Кицунэ-сама", Древний Робот "Дэнси-но Ками"), который:

Визуально присутствует в интерфейсе урока (левая панель).

Генерирует объяснения и задания (через Gemini).

Дает контекстные подсказки (если игрок застрял).

Появляется с анимацией и репликами при повышении уровня, выполнении квестов, получении достижений.

Его внешний вид или реплики могут немного меняться с прогрессом игрока.

3. Структура Экранов и Пользовательский Путь (User Flow)

3.1. index.html (Вход / Заставка):

Визуал: Полноэкранная пиксель-арт заставка (анимация? параллакс?). Логотип, название.

Взаимодействие: Кнопка "Начать Приключение". По клику – плавный переход (fade out/in?) на map.html.

(Будущее): Поля для логина/регистрации.

3.2. map.html (Карта / Хаб):

Визуал: Пиксельная карта с различными локациями (узлами). Отображение пиксельной фигурки персонажа игрока на текущем узле. HUD (Head-Up Display) с уровнем, XP, возможно, кнопка доступа к Меню/Профилю.

Навигация:

Клики мышью на доступные соседние узлы.

Использование стрелок клавиатуры для перемещения между узлами.

Анимация перемещения персонажа.

Узлы Карты:

Додзё (Уроки): Основные точки обучения. Визуально отличаются (разные здания). При наведении – название урока/темы (напр., "Додзё Частицы は"). Клик -> переход на lesson.html.

Испытания (Квесты/Боссы): Особые точки (Башни, Логова, Врата Тории). При наведении – название испытания, сложность, награда. Клик -> переход на quest.html (или модальное окно с квестом).

Города/Деревни: Безопасные зоны. Визуально – скопление домиков. При наведении – "Город [Название]". Клик -> Открытие меню города (модальное окно или отдельный экран city.html?) с опциями: Профиль, SRS-Тренажер, Журнал Квестов, Магазин (если будет).

Скрытые Локации: Появляются на карте после выполнения определенных условий (секретные квесты, достижения).

Прогрессия: Изначально видна/доступна только часть карты. Прохождение ключевых Додзё/Испытаний "снимает туман войны" или строит мосты к новым областям.

3.3. lesson.html (Экран Урока / Додзё):

Загрузка: Получает параметр урока (lessonIndex или topicId) из URL.

Интерфейс: Три панели.

Левая: Заголовок темы, текст объяснения от Gemini, статичное/анимированное изображение AI-Сэнсэя. Кнопки "Подсказка?" / "Объясни иначе?".

Центральная: Текст задания от Gemini. Интерактивные элементы (кнопки multipleChoice/fillInBlank, поле для ввода перевода, drag-and-drop элементы для составления фраз).

Правая: Список новых слов от Gemini. Возможность кликнуть на слово для деталей/добавления в SRS.

Взаимодействие: Выбор/ввод ответа -> checkAnswer() -> обратная связь (визуальная + текстовая + звук?) -> начисление XP (addXP) -> Возможно, автоматический переход к следующему шагу ИЛИ кнопка "Далее" для подтверждения.

Выход: Кнопка "Вернуться на Карту" -> window.location.href = 'map.html';.

3.4. quest.html (Экран Испытания / Босс-Файт):

Визуал: Отличается от урока. Более динамичный фон, стилизация под битву. Шкала "здоровья босса" или таймер.

Механика: Серия быстрых вопросов по пройденным темам. Типы заданий могут быть смешаны. Ошибки отнимают "время" или "жизни". Серии правильных ответов наносят "урон боссу" или дают комбо-множитель XP.

Награды: Повышенное XP, Редкие Свитки, Предметы кастомизации.

Выход: После победы/поражения -> Возврат на карту с сообщением о результате.

3.5. profile.html (Профиль - доступ из Города):

Визуал: Отображение аватара игрока.

Статистика: Уровень, XP (с прогресс-баром), количество пройденных уроков/испытаний, выучено слов (из SRS), выучено кандзи, самый длинный стрик занятий.

Коллекция Свитков/Достижений: Галерея полученных свитков (иконки). Клик на свиток показывает тему/достижение. Отображение полученных титулов ("Grammar Ninja" и т.д.).

Кастомизация: (Будущее) Выбор/изменение цвета одежды аватара, аксессуаров (если будут).

Доступ: Кнопка входа в SRS-Тренажер.

3.6. SRS-Тренажер (Модальное окно / Отдельный экран):

Интерфейс: Отображение слова/кандзи (лицевая сторона карточки). Кнопка "Показать ответ". После показа – кнопки "Не помню" / "Трудно" / "Легко".

Логика: Алгоритм интервального повторения (например, на основе системы Лейтнера или модифицированный SuperMemo 2). Выбирает слова/кандзи из localStorage.vocabularySRS, у которых дата повторения <= сегодня. Обновляет интервалы и дату следующего повторения в зависимости от ответа пользователя.

4. Детализация Функций и Механик

4.1. Генерация Контента (AI - ai.js / lessons.js):

Промпты: Максимально детализированные, с четким запросом структуры JSON, указанием роли AI, темы, уровня JLPT, типа желаемого контента (объяснение, тип упражнения, слова, XP). Запрос на отсутствие Markdown.

Типы Упражнений (Планируемые): multipleChoice (объекты), fillInBlank (строки), translationRUtoJP (ввод текста), translationJPtoRU (ввод текста), matchPairs (соединить слова/фразы), sentenceBuilder (составить предложение из слов drag-n-drop).

Обработка Ответа: Надежный парсинг JSON (try-catch). Проверка наличия и корректности типов всех ожидаемых полей (explanation, exercise.type, exercise.options и т.д.) перед использованием. Отображение понятных сообщений об ошибках, если AI вернул некорректные данные.

Контекстная Помощь: (Будущее) Возможность отправить доп. запрос AI ("Объясни пример X подробнее"), передавая текущий контекст урока.

4.2. Система Прогрессии (storage.js, profile.js):

XP и Уровни: Четкая формула расчета xpPerLevel (возможно, увеличивается с уровнем?). Визуальные и звуковые эффекты при левел-апе. Уровни могут открывать доступ к новым регионам карты, типам испытаний, косметике.

Свитки Знаний: Присуждаются за полное прохождение Додзё (урока) или Испытания. Хранятся как ID пройденных тем/квестов. Отображаются в профиле. Могут быть "Базовые" и "Редкие".

Достижения: Отслеживание определенных метрик (слов в SRS, кандзи, пройденных уроков, стриков, выполнения секретных квестов). При достижении порога – разблокировка ачивки/титула/свитка.

4.3. SRS (storage.js, UI):

Структура Данных Слова: { id: uniqueId, japanese: "...", kana: "...", russian: "...", addedStepId: "...", srsLevel: 1, nextReviewDate: timestamp, easeFactor: 2.5 (для SM2), intervalDays: 1 }

Алгоритм: При запуске тренажера – выборка слов с nextReviewDate <= now. После ответа – расчет нового srsLevel, intervalDays, easeFactor (если SM2), nextReviewDate. Сохранение в localStorage.

UI: Минималистичный, быстрый, фокус на процессе повторения.

4.4. Квесты (quests.js?, Логика на Карте/в Городе):

Ежедневные/Еженедельные: Генерируются по расписанию (например, "Пройти 1 Додзё", "Повторить 10 слов в SRS", "Выиграть 1 Испытание"). Отображаются в Городе. Награды – XP, "монетки".

Секретные/Адаптивные: Триггерятся при определенных условиях (много подсказок -> квест без подсказок; мало кандзи -> квест на кандзи). Появляются как новые узлы на карте или в журнале. Награды – уникальные свитки, косметика.

4.5. Карта и Навигация (map.js):

Данные Карты: Можно хранить структуру карты (узлы, их типы, координаты, связи, требования для открытия) в отдельном JS-объекте или JSON-файле.

Состояние: localStorage хранит текущую позицию игрока на карте и список открытых/пройденных узлов.

Рендеринг: JavaScript динамически создает и позиционирует узлы и персонажа на основе данных карты и состояния игрока.

5. Технические Детали и Стек

5.1. Frontend: Чистый HTML5, CSS3, JavaScript (ES6+). Без фреймворков на данный момент для простоты и фокуса на ванильной разработке.

5.2. AI: Google Gemini API (gemini-1.5-flash-latest, v1beta URL). Ключ API должен быть защищен бэкендом.

5.3. Хранение (Клиент): localStorage. Подходит для прогресса одного пользователя на одном браузере. Не подходит для синхронизации между устройствами или мультиплеера.

5.4. Backend (План): Serverless Functions (Vercel/Netlify) с Node.js – приоритет №1 для защиты ключа. Позволит легко развернуть сайт бесплатно.

5.5. Стилизация: CSS (возможно, с препроцессором SASS/SCSS в будущем для удобства). Фокус на пиксель-арт и неоновых эффектах.

5.6. Графика: Пиксель-арт ресурсы (персонажи, карта, иконки, UI элементы). Либо рисовать самостоятельно, либо использовать бесплатные/платные ассеты.

5.7. Звук: Простые звуковые эффекты для UI, достижений. Возможно, фоновая музыка для карты/уроков.

6. Структура Файлов (Уточненная)

/japanese-teacher-game
│── index.html            # Главная страница (заставка)
│── map.html              # Карта приключений (хаб)
│── lesson.html           # Шаблон страницы урока (Додзё)
│── quest.html            # Шаблон страницы испытания (Босс) - ? или динамически на карте
│── profile.html          # Страница профиля - ? или модальное окно из Города
│
├── /styles
│   ├── main.css          # Общие стили, переменные, сброс
│   ├── home.css          # Стили index.html
│   ├── map.css           # Стили map.html
│   ├── lesson.css        # Стили lesson.html (3 панели)
│   ├── quest.css         # Стили quest.html / испытаний
│   ├── profile.css       # Стили профиля
│   ├── srs.css           # Стили SRS-тренажера
│   └── components.css    # Стили общих компонентов (кнопки, панели и т.д.)
│
├── /scripts
│   ├── main.js           # Глобальная инициализация, роутинг(?) или управление экранами
│   ├── home.js           # Логика index.html (если нужна)
│   ├── map.js            # Логика карты, навигация, загрузка данных карты
│   ├── lesson.js         # Логика урока (загрузка данных, UI, связь с AI, проверка - бывший app.js)
│   ├── quest.js          # Логика испытаний
│   ├── profile.js        # Логика профиля, отображение статистики, достижений
│   ├── srs.js            # Логика SRS (алгоритм, управление данными)
│   ├── storage.js        # Функции для работы с localStorage (get/set с проверками)
│   ├── ai.js             # Функция callGeminiApi и, возможно, обработчики ответов
│   └── constants.js      # Константы (xpPerLevel, структура уроков MNN?, настройки SRS)
│
├── /assets
│   ├── /images           # Графика (player.png, map_bg.png, icons/, ...)
│   ├── /audio            # Звуки (level_up.wav, correct.mp3, ...)
│   └── /fonts            # Шрифты
│
├── /api                  # (Для Serverless)
│   └── geminiProxy.js    # Прокси-функция
│
├── .gitignore
└── README.md             # Документация
Use code with caution.
Примечание: Вместо отдельных HTML-файлов для всего, можно использовать один index.html и динамически менять его содержимое с помощью JS (Single Page Application - SPA). Это сложнее в реализации без фреймворков, но возможно.

7. План Разработки (Примерный, Гибкий)

Фаза 1 (Ядро) - ЧАСТИЧНО ГОТОВО:

[✓] Базовый HTML/CSS.

[✓] Интеграция Gemini API.

[✓] Ядро урока (3 панели).

[✓] Базовые типы заданий (multipleChoice, fillInBlank).

[✓] Система XP/Уровней.

[✓] localStorage (базовый прогресс, защита XP).

[✓] UI Улучшения (загрузка, фидбек).

[✓] Главная страница (index.html).

Фаза 2 (Навигация и Структура):

Базовая карта (map.html).

Навигация (Главная -> Карта -> Урок -> Карта).

Перенос логики урока в lesson.js / lesson.html.

Загрузка урока по параметру.

Фаза 3 (Безопасность и Деплой):

Бэкенд-прокси (Serverless) для API ключа.

Настройка и первый деплой на Vercel/Netlify.

Фаза 4 (Ключевые Учебные Фичи):

Реализация SRS (логика + базовый UI).

Добавление новых типов заданий (перевод, и т.д.).

Наполнение контентом (больше тем lessons).

Кандзи-тренажер (базовый).

Фаза 5 (Геймификация и Мир):

Детализация карты (графика, разные узлы).

Экран Профиля (статистика, ачивки-свитки).

Система Квестов (ежедневные, адаптивные).

Экран Испытаний ("Босс-файты").

Фаза 6 (Полировка и Дополнения):

Графика и Анимации.

Звуковые эффекты.

Кастомизация аватара.

Магазин (если нужен).

Оптимизация производительности.

Фаза 7 (Будущее):

Аутентификация пользователей (полноценный бэкенд + БД).

Синхронизация прогресса.

Доски лидеров.

Кооперативные режимы.

8. Заключение

Проект "Японский Учитель-Игра" амбициозен и сочетает образовательные цели с глубокой геймификацией. Успех будет зависеть от тщательного баланса между эффективностью обучения и увлекательностью игрового процесса, а также от поэтапной реализации сложных функций, начиная с создания основной структуры навигации и обеспечения безопасности API ключа.

Фух! Это была действительно детальная раскладка. Надеюсь, это то, что ты хотел. Этот документ можно использовать как "живой" – обновлять и дополнять по ходу разработки. Что скажешь? Готов двигаться дальше, помня об этой большой картине? Начнем с Шага 2 из Плана Разработки - создания базовой карты?